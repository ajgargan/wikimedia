AWSTemplateFormatVersion: 2010-09-09
Description: 'This template deploys an ECS cluster to the provided VPC and subnets using an Auto Scaling Group'
Parameters:
  InstanceType:
    Description: Which instance type should we use to build the ECS cluster? Only
      applicable if ECSClusterName is blank
    Type: String
    Default: c4.2xlarge
  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy? Only applicable
      if ECSClusterName is blank
    Type: Number
    Default: 2
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access AWX. We recommend that
      you set this value to a trusted IP range. o. Only applicable if ALBArn is blank
    Type: String
  ECSSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to. Only
      applicable if ECSClusterName is blank
    Type: List<AWS::EC2::Subnet::Id>
  ALBSubnets:
    Description: Choose which subnets the Application Load Balancer should be deployed
      to. Only applicable if ALBArn is blank
    Type: List<AWS::EC2::Subnet::Id>
  RDSSubnets:
    Description: Choose which subnets the RDS Database should be deployed to. Only
      applicable if DatabaseEndpoint is blank
    Type: List<AWS::EC2::Subnet::Id>
  VPC:
    Description: Choose which VPC this ECS cluster should be deployed to. Only applicable
      if ECSClusterName is blank
    Type: AWS::EC2::VPC::Id
  KeyPairName:
    Description: SSH KeyPair name
    Type: String
    Default: ''
  RDSAccessCidr:
    Description: CIDR block to allow to connect to database. Only applicable if DatabaseEndpoint
      is blank
    Type: String
  AvailabilityZones:
    Description: list of availability zones to use, must be the same quantity as specified
      in NumberOfAvailabilityZones. Only applicable if DatabaseEndpoint is blank
    Type: List<AWS::EC2::AvailabilityZone::Name>
  BackupRetentionPeriod:
    Description: The number of days during which automatic DB snapshots are retained.
      Setting 0 disables automatic snapshots, maximum value is 35. Only applicable
      if DatabaseEndpoint is blank
    Type: Number
    Default: '35'
    MinValue: '0'
    MaxValue: '35'
  CidrBlocks:
    Description: comma seperated list of CIDR blocks to place RDS into, must be the
      same quantity as specified in NumberOfAvailabilityZones. Only applicable if
      DatabaseEndpoint is blank
    Type: CommaDelimitedList
    Default: 172.16.29.0/26,172.16.29.64/26
  CopyTagsToSnapshot:
    Description: Indicates whether to copy all of the user-defined tags from the DB
      instance to snapshots of the DB instance. Only applicable if DatabaseEndpoint
      is blank
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  DBInstanceClass:
    Description: The compute and memory capacity of the DB instance. Only applicable
      if DatabaseEndpoint is blank
    Type: String
    Default: db.t2.medium
    AllowedValues:
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
  DBName:
    Description: The name of the database to create when the DB instance is created.
      Only applicable if DatabaseEndpoint is blank
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: ^(?!^mysql$)[a-zA-Z_][a-zA-Z0-9_]*$
    ConstraintDescription: must contain from 1 to 63 alphanumeric characters, and
      not be reserved mysql term. Only applicable if DatabaseEndpoint is blank
    Default: MediaWiki
  MasterUserPassword:
    Description: Master user database Password. Only applicable if DatabaseEndpoint
      is blank
    Type: String
    NoEcho: 'true'
  MasterUsername:
    Description: Master database Username. Only applicable if DatabaseEndpoint is
      blank
    Type: String
  PortNumber:
    Description: The port number for the database server to listen on
    Type: Number
    Default: '3306'
    MinValue: '1150'
    MaxValue: '65535'
Mappings:
  AWSRegionToAMI:
    us-east-2:
      AMI: ami-1c002379
    us-east-1:
      AMI: ami-9eb4b1e5
    us-west-2:
      AMI: ami-1d668865
    us-west-1:
      AMI: ami-4a2c192a
    eu-west-2:
      AMI: ami-cb1101af
    eu-west-1:
      AMI: ami-8fcc32f6
    eu-central-1:
      AMI: ami-0460cb6b
    ap-northeast-1:
      AMI: ami-b743bed1
    ap-southeast-2:
      AMI: ami-c1a6bda2
    ap-southeast-1:
      AMI: ami-9d1f7efe
    ca-central-1:
      AMI: ami-b677c9d2
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWX ECS cluster hosts
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'ALBSecurityGroup'
          IpProtocol: '-1'
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ["MountTargetA", "MountTargetB" ]
    Properties:
      VPCZoneIdentifier: !Ref 'ECSSubnets'
      LaunchConfigurationName: !Ref 'ECSLaunchConfiguration'
      MinSize: !Ref 'ClusterSize'
      MaxSize: !Ref 'ClusterSize'
      DesiredCapacity: !Ref 'ClusterSize'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true
  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyPairName'
      SecurityGroups:
        - !GetAtt 'ClusterSecurityGroup.GroupId'
      IamInstanceProfile: !Ref 'ECSInstanceProfile'
      UserData: !Base64
        Fn::Sub: '#!/bin/bash

          yum install -y aws-cfn-bootstrap nfs-utils jq

          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName}
          --resource ECSLaunchConfiguration

          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName}
          --resource ECSAutoScalingGroup

          '
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub 'echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config'
            02_mount_efs:
              command: "/tmp/mount-efs.sh"
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 256
              owner: root
              group: root
              content: !Sub '[main]

                stack=${AWS::StackId}

                region=${AWS::Region}

                '
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub ['[cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init

                ${Param1}', {Param1: !Sub 'action=/opt/aws/bin/cfn-init -v --region
                ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration'}]
            /tmp/mount-efs.sh:
              mode: "000755"
              content : !Sub |
                #!/bin/bash

                EFS_REGION=${AWS::Region}
                EFS_MOUNT_DIR=/mnt/efs
                EFS_FILE_SYSTEM_ID=${EFSFileSystem}

                echo "Mounting EFS filesystem ${EFSFileSystem} to directory $EFS_MOUNT_DIR ..."

                echo 'Stopping NFS ID Mapper...'
                service rpcidmapd status &> /dev/null
                if [ $? -ne 0 ] ; then
                    echo 'rpc.idmapd is already stopped!'
                else
                    service rpcidmapd stop
                    if [ $? -ne 0 ] ; then
                        echo 'ERROR: Failed to stop NFS ID Mapper!'
                        exit 1
                    fi
                fi

                echo 'Checking if EFS mount directory exists...'
                if [ ! -d $EFS_MOUNT_DIR ]; then
                    echo "Creating directory $EFS_MOUNT_DIR ..."
                    mkdir -p $EFS_MOUNT_DIR
                    if [ $? -ne 0 ]; then
                        echo 'ERROR: Directory creation failed!'
                        exit 1
                    fi
                else
                    echo "Directory $EFS_MOUNT_DIR already exists!"
                fi

                mountpoint -q $EFS_MOUNT_DIR
                if [ $? -ne 0 ]; then
                    echo "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_FILE_SYSTEM_ID.efs.${AWS::Region}.amazonaws.com:/ $EFS_MOUNT_DIR"
                    mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_FILE_SYSTEM_ID.efs.${AWS::Region}.amazonaws.com:/ $EFS_MOUNT_DIR
                    if [ $? -ne 0 ] ; then
                        echo 'ERROR: Mount command failed!'
                        exit 1
                    fi
                    chmod 777 $EFS_MOUNT_DIR
                    runuser -l  ec2-user -c "touch $EFS_MOUNT_DIR/it_works"
                    if [[ $? -ne 0 ]]; then
                        echo 'ERROR: Permission Error!'
                        exit 1
                    else
                        runuser -l  ec2-user -c "rm -f $EFS_MOUNT_DIR/it_works"
                    fi
                else
                    echo "Directory $EFS_MOUNT_DIR is already a valid mountpoint!"
                fi

                echo 'EFS mount complete.'
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ECSInstanceRole'
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWX ECS Application Load Balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: !Ref 'RemoteAccessCIDR'
          IpProtocol: '-1'
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref 'ALBSubnets'
      SecurityGroups:
        - !Ref 'ALBSecurityGroup'
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub 'Application: WikiMedia Database: ${DBName}'
      Family: "aurora5.6"
      Parameters:
        sql_mode: IGNORE_SPACE
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub 'Application: WikiMedia Database: ${DBName}'
      SubnetIds:
        - !Select [0, !Ref 'RDSSubnets']
        - !Select [1, !Ref 'RDSSubnets']
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Allow Client connections to Application: WikiMedia Database:
        ${DBName}'
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref 'PortNumber'
          ToPort: !Ref 'PortNumber'
          CidrIp: !Ref 'RDSAccessCidr'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value: "EB-EFS-FileSystem"
      PerformanceMode: "generalPurpose"
      Encrypted: "false"
  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !Ref MountTargetSecurityGroup
      SubnetId: !Select [ 0 , !Ref 'ECSSubnets' ]
  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !Ref MountTargetSecurityGroup
      SubnetId: !Select [ 1 , !Ref 'ECSSubnets' ]
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - FromPort: '2049'
        IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt 'ClusterSecurityGroup.GroupId'
        ToPort: '2049'
      VpcId: !Ref VPC
  RDSCluster:
    Type: AWS::RDS::DBCluster
    # This is just to easily tear down and not have any residual. Not for production
    DeletionPolicy: Delete
    Properties:
      MasterUsername:
        Ref: MasterUsername
      MasterUserPassword:
        Ref: MasterUserPassword
      Engine: aurora
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBClusterParameterGroupName:
        Ref: RDSDBClusterParameterGroup
  RDSDBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBParameterGroupName:
        Ref: RDSDBParameterGroup
      Engine: aurora
      DBClusterIdentifier:
        Ref: RDSCluster
      PubliclyAccessible: 'true'
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      DBInstanceClass: !Ref DBInstanceClass
  RDSDBInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBParameterGroupName:
        Ref: RDSDBParameterGroup
      Engine: aurora
      DBClusterIdentifier:
        Ref: RDSCluster
      PubliclyAccessible: 'true'
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      DBInstanceClass: !Ref DBInstanceClass
  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Aurora Cluster Parameter Group
      Family: aurora5.6
      Parameters:
        time_zone: US/Eastern
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Aurora Parameter Group
      Family: aurora5.6
      Parameters:
        sql_mode: IGNORE_SPACE
Outputs:
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref 'ECSCluster'
  ALBARN:
    Description: ALB ARN
    Value: !Ref ALB
  ALBDNS:
    Description: ALB ARN
    Value: !GetAtt 'ALB.DNSName'
  ECSInstanceRoleARN:
    Description: ECS IAM Role
    Value: !GetAtt 'ECSInstanceRole.Arn'
  DatabaseEndpoint: 
    Description: RDS DB Endpoint
    Value: !GetAtt 'RDSCluster.Endpoint.Address'