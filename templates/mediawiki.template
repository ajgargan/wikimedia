AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a wikimedia cluster
Parameters:
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: quickstart-reference
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: redhat/awx/latest/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  Cluster:
    Description: Name of ECS cluster to deploy awx service to
    Type: String
    Default: removeme
  AWXWebRegistry:
    Description: Name of ECR containing the awx_web image
    Type: String
    Default: removeme
  AWXTaskRegistry:
    Description: Name of ECR containing the awx_task 
    Type: String
    Default: removeme
  RabbitMQRegistry:
    Description: Name of ECR containing the rabbitmq image
    Type: String
    Default: removeme
  MemcachedRegistry:
    Description: Name of ECR containing the memcached image
    Type: String
    Default: removeme
  AWXVersion:
    Description: Which version of AWX to use
    Type: String
    Default: 1.0.1
    AllowedValues:
      - 1.0.1
      - 1.0.0
  AWXGitHubRepo:
    Description: Which github should we use as the source for the build ?
    Type: String
    Default: https://github.com/ansible/awx.git
  MasterUserPassword:
    Description: Master user database Password. Only applicable if DatabaseEndpoint
      is blank
    Type: String
    NoEcho: 'true'
  MasterUsername:
    Description: Master database Username. Only applicable if DatabaseEndpoint is
      blank
    Type: String
  DatabaseEndpoint:
    Description: Endpoint for postgres database
    Type: String
    Default: removeme
  ALBARN:
    Description: Arn for ALB
    Type: String
    Default: removeme
  VPC:
    Description: VPCID
    Type: String
    Default: removeme
Conditions:
  GovCloudCondition: !Equals [!Ref 'AWS::Region', us-gov-west-1]
Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/scripts/dummy.zip'
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${MemcachedRegistry}'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RabbitMQRegistry}'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWXTaskRegistry}'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWXWebRegistry}'
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
              - Effect: Allow
                Resource: "*"
                Action:
                  - ecr:GetAuthorizationToken
  AWXCodeBuildProject:
    DependsOn: CodeBuildRole
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'awx-build-${AWS::StackName}'
      Description: Builds the RedHat AWX container images to ECR
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: docker.io/amazonlinux:2017.09
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: AWX_TASK_REPO
            Value: !Ref 'AWXTaskRegistry'
          - Name: AWX_WEB_REPO
            Value: !Ref 'AWXWebRegistry'
          - Name: MEMCACHED_REPO
            Value: !Ref 'MemcachedRegistry'
          - Name: RABBITMQ_REPO
            Value: !Ref 'RabbitMQRegistry'
          - Name: AWX_VERSION
            Value: !Ref 'AWXVersion'
          - Name: pg_hostname
            Value: !Ref 'DatabaseEndpoint'
          - Name: pg_password
            Value: !Ref MasterUserPassword
          - Name: pg_username
            Value: !Ref MasterUsername
          #- Name: AWS_ACCOUNT_ID
          #  Value: !Sub '${AWS::AccountId}'
          - Name: cfn_signal_url
            Value: 'placeholder'
          - Name: cfn_stack_id
            Value: 'placeholder'
          - Name: cfn_logical_resource_id
            Value: 'placeholder'
          - Name: cfn_request_id
            Value: 'placeholder'
      Source:
        Auth:
          Type: OAUTH
        Location: !Ref 'AWXGitHubRepo'
        Type: GITHUB
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - yum install -y git gcc docker python27-pip python27-devel libffi-devel openssl-devel git curl util-linux
                - /usr/bin/pip install -U docker-py ansible awscli
                - service docker start
                - $(aws ecr get-login --no-include-email)
                - set
            build:
              commands:
                - cd installer/
                - echo ansible-playbook -i inventory -e pg_hostname=$pg_hostname,pg_username=$pg_username,pg_password=$pg_password,pg_database=awx,pg_port=5432 install.yml
                - ansible-playbook -i inventory -e pg_hostname="$pg_hostname",pg_username="$pg_username",pg_password="$pg_password",pg_database="awx",pg_port="5432" install.yml
                - docker container ls --all
                - docker image ls --all
                - export ACCOUNT_ID=$(echo ${CODEBUILD_BUILD_ARN} | awk -F':' '{print $5}')
                - >
                  docker tag ansible/awx_task ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWX_TASK_REPO}:${AWX_VERSION} &&
                  docker push ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWX_TASK_REPO}:${AWX_VERSION}
                - >
                  docker tag ansible/awx_web ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWX_WEB_REPO}:${AWX_VERSION} &&
                  docker push ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWX_WEB_REPO}:${AWX_VERSION}
                - >
                  docker tag memcached:alpine ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${MEMCACHED_REPO}:${AWX_VERSION} &&
                  docker push ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${MEMCACHED_REPO}:${AWX_VERSION}
                - >
                  docker tag rabbitmq:3 ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${RABBITMQ_REPO}:${AWX_VERSION} &&
                  docker push ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${RABBITMQ_REPO}:${AWX_VERSION}
            post_build:
              commands:
                # FIXME: Need to trap and only execute this if the Build is passing.
                - echo "Signal back if we have gotten this far"
                # FIXME: Wanted to add a UUID but then I have an issue with storing these somewhere.
                - export UUID=1233244324
                #- |
                #  echo if \[ ${CODEBUILD_BUILD_SUCCEEDING} \-eq 1 \]\; then curl -X PUT -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"SUCCESS\"}" "$cfn_signal_url\; else curl -X PUT -H 'Content-Type:' -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"FAILED\"}" "$cfn_signal_url"\;fi\;
                - |
                  if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]
                  then
                    curl -X PUT -H 'Content-Type:' -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"SUCCESS\"}" "$cfn_signal_url"
                  else
                    curl -X PUT -H 'Content-Type:' -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"FAILED\"}" "$cfn_signal_url"
                  fi
      # FIXME: get this close to the actual time things take with 5 minute margin added for safety
      TimeoutInMinutes: 60
  BuildContainers:
    Type: Custom::BuildContainers
    Properties:
      # FIXME: This is to force a build, increment number (should only be the versions of AWX that cause this.)
      UpdateMe: 931
      ServiceToken: !GetAtt BuildContainersLambda.Arn
      BuildProjectName: !Ref AWXCodeBuildProject
      # cfn_signal_url: is part of the event by default hence missing here 
      # cfn_stack_id: is part of the event by default 
      # cfn_request_id: also part of the event
      # cfn_logical_resource_id: also part of the event
      # Lambda function passes the above into the build project when invoking StartBuild
  BuildContainersLambda:
    DependsOn: BuildContainersLambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref QSS3BucketName
        S3Key: 
          Fn::Join:
            - ""
            - - !Ref QSS3KeyPrefix
              - "scripts/lambda_codebuild.zip"
      Handler: !Sub "lambda_codebuild.lambda_handler"
      Runtime: python2.7
      Timeout: 300
      Role: !GetAtt BuildContainersLambdaExecutionRole.Arn
  BuildContainersLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            Resource: !GetAtt AWXCodeBuildProject.Arn
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngres
                  - ec2:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'
  MediaWikiWebService:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: 1
      TaskDefinition: !Ref MediaWikiWebTaskDefinition
      LoadBalancers:
        - ContainerName: "MediaWikiWeb"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup 
  MediWikiWebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: MediaWikiWeb
          Hostname: MediaWikiWeb
          Essential: true
          Image: wikimedia/mediawiki
          Memory: 1024
          PortMappings:
            - ContainerPort: 8052
              HostPort: 80
          LogConfiguration:
            LogDriver: json-file
          Environment:
            - Name: "http_proxy"
              Value: ""
            - Name: "https_proxy"
              Value: ""
            - Name: no_proxy
              Value: ""
            - Name: SECRET_KEY
              Value: "awxsecret"
            - Name: DATABASE_NAME
              Value: "awx"
            - Name: DATABASE_USER
              Value: !Ref MasterUsername
            - Name: DATABASE_PASSWORD
              Value: !Ref MasterUserPassword
            - Name: DATABASE_PORT
              Value: "5432"
            - Name: DATABASE_HOST
              Value: !Ref 'DatabaseEndpoint'
            - Name: RABBITMQ_USER
              Value: "guest"
            - Name: RABBITMQ_PASSWORD
              Value: "guest"
            - Name: RABBITMQ_HOST
              Value: "rabbitmq"
            - Name: RABBITMQ_PORT
              Value: "5672"
            - Name: RABBITMQ_VHOST
              Value: "awx"
            - Name: MEMCACHED_HOST
              Value: "memcached"
            - Name: MEMCACHED_PORT
              Value: "11211"
            - Name: AWX_ADMIN_USER
              Value: "admin"
            - Name: AWX_ADMIN_PASSWORD
              Value: "password"
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher: 
        HttpCode: 200-499
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values:
        - "/"
      Actions:
      - Type: forward
        TargetGroupArn: 
          Ref: TargetGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'ALBARN'
      Port: '443'
      Protocol: HTTPS
